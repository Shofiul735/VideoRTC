@{
    ViewData["Title"] = "Home Page";
}

<style>
    button:disabled{
        opacity: 0.25 !important;
    }
    .disabled-btn{
        opacity: 0.25 !important;
    }
</style>

<div>
    <!--
    <input type="file" accept="video/*" capture="user" />
    <input type="file" accept="video/*" capture="environment" />
    -->

    <div style="width:50vw; height:40vh;">
        <video id="player" playsinline="" autoplay muted class="h-100 w-100">
        </video>
    </div>
    <div class="mt-5"></div>
    <div class="mt-3">
        <button class="btn btn-primary" id="video-start" onclick="onStart()"> Start </button>
        <button class="btn btn-danger" id="video-stop" disabled onclick="onStop()"> Stop </button>
        <a id="video-download" class="btn btn-success">Download</a>
        <button class="btn btn-info" id="video-preview" disabled onclick="onPreview()"> Preview </button>
    </div>
    <p class="text-warning mt-2 mb-0" id="message"> Click the start button to start the video </p>
    <div class="d-flex gap-5">
        <div class="select">
            <label for="audioSource">Audio source: </label>
            <select onchange="getStream()" class="form-select" id="audioSource"></select>
        </div>

        <div class="select">
            <label for="videoSource">Video source: </label>
            <select onchange="getStream()" class="form-select" id="videoSource"></select>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">


            let mimeType = 'video/webm';
            if (/iPod|iPhone|iPad/i.test(navigator.userAgent)) {
                mimeType = 'video/mp4';
            }
            let mediaRecorder;
            let recordedChunks;
            let shouldStop = false;
            let stopped = false;
            let appendSource = false;
            const player = $('#player');
            const videoStart = $('#video-start');
            const videoStop = $('#video-stop');
            const downloadLink = $('#video-download');
            const videoPreview = $('#video-preview');
            const message = $('#message');

            let videoSource = null;
            const audioSelect = $('#audioSource');
            const videoSelect = $('#videoSource');



            const getStream = () => {
                if (window.stream) {
                    window.stream.getTracks().forEach(track => {
                        track.stop();
                    });
                }
                message.text("Recording,click stop button to stop the video,click preview button to preview");
                videoStart.prop('disabled', true);
                videoStop.prop('disabled', false);
                videoPreview.prop('disabled', true);
                player.prop('muted',true);

                const audioSource = audioSelect.value;
                const videoSource = videoSelect.value;

                const constraints = {
                    audio: { deviceId: audioSource ? { exact: audioSource } : undefined },
                    video: { deviceId: videoSource ? { exact: videoSource } : undefined }
                };
                return navigator.mediaDevices.getUserMedia(constraints).
                    then(gotStream);
            }



            const gotStream = (stream) => {
                message.text("Recording,click stop button to stop the video,click preview button to preview");
                videoStart.prop('disabled', true);
                videoStop.prop('disabled', false);
                videoPreview.prop('disabled', true);
                player.prop('muted',true);

                window.stream = stream; // make stream available to console
                audioSelect.selectedIndex = [...audioSelect.children()].
                    findIndex(option => option.text === stream.getAudioTracks()[0].label);
                videoSelect.selectedIndex = [...videoSelect.children()].
                    findIndex(option => option.text === stream.getVideoTracks()[0].label);
                player.prop('srcObject',stream);
                recordedChunks = [];
                try {
                    mediaRecorder = new MediaRecorder(window.stream, { mimeType: mimeType, audioBitsPerSecond: 128000, videoBitsPerSecond: 12000000 }); //audioBits=128000 is max
                } catch {
                    console.log(`Failed`);
                }
                mediaRecorder.addEventListener('dataavailable', function (e) {
                    if (e.data.size > 0) {
                        recordedChunks.push(e.data);
                    }
                    if (shouldStop === true && stopped === false) {
                        mediaRecorder.stop();
                        stopped = true;
                    }
                });
                mediaRecorder.addEventListener('stop', function () {
                    downloadLink.prop('href',URL.createObjectURL(new Blob(recordedChunks)));
                    downloadLink.prop('download','acetest.mp4');
                });
                mediaRecorder.start();
                console.log(mediaRecorder);
            }


            const getDevices = () => {
                // AFAICT in Safari this only gets default devices until gUM is called :/
                return navigator.mediaDevices.enumerateDevices();
            }

            const gotDevices = (deviceInfos) => {
                window.deviceInfos = deviceInfos; // make available to console
                
                while (videoSelect.children().last().length > 0) {
                    videoSelect.children().last().remove();
                }
                while (audioSelect.children().last().length > 0) {
                    audioSelect.children().last().remove()
                }
                for (const deviceInfo of deviceInfos) {
                    const option = document.createElement('option');
                    option.value = deviceInfo.deviceId;
                    if (deviceInfo.kind === 'audioinput') {
                        option.text = deviceInfo.label || `Microphone ${audioSelect.length + 1}`;
                        audioSelect.append(option);
                    } else if (deviceInfo.kind === 'videoinput') {
                        option.text = deviceInfo.label || `Camera ${videoSelect.length + 1}`;
                        videoSelect.append(option);
                    }
                }
            }

            const onStop = (event) => {
                if (mediaRecorder && mediaRecorder.state === "recording") {
                    console.log(mediaRecorder.stop);
                    mediaRecorder.stop();
                    while (player.children().last().length > 0) {
                        player.children().last().remove();
                    }
                    appendSource = false;
                    videoSource = false;
                    player.prop('srcObject',null);
                }
                if (recordedChunks) {
                    shouldStop = false;
                    videoPreview.prop('disabled', false);
                    message.text("Click the start button to start a new video");
                    videoStart.prop('disabled', false);
                    videoStop.prop('disabled', true);
                    videoPreview.prop('disabled', false);
                }
            }

            const onPreview = () => {
                if (recordedChunks) {
                    const Blobstream = new Blob(recordedChunks, { type: mimeType });
                    if (!videoSource) {
                        videoSource = document.createElement('source');
                    }
                    videoSource.src =  window.URL.createObjectURL(Blobstream);
                    videoSource.type = Blobstream.type;
                    if (!appendSource) {
                        player.append(videoSource);
                        appendSource = true;
                    }
                    player.prop('controls',true);
                    player.prop('muted', false);
                    //console.log(player.load);
                    //player.load();
                    //player.play();
                }
            };


            const onStart =  () => {
                navigator.mediaDevices
                    .getUserMedia(
                        {
                            audio: true,
                            video: true,
                        }
                    ).then(gotStream)
                    .then(getDevices)
                    .then(gotDevices)
                    .catch((errors) => {
                        //alert(`Camera and microphone permissions are required,please refresh the page and try again!`);
                        console.log(errors);
                        return;
                    });
            };



            getDevices().then(gotDevices);
            console.log(recordedChunks);

            /*
            navigator.permissions.query({ name: "camera" }).then(res => {
                    console.log(res);
                    if(res.state == "granted"){
                        message.innerText = "Recording,click stop button to stop the video,click preview button to preview";
                        videoStart.disabled = true;
                        videoStop.disabled = false;
                        videoPreview.disabled = true;
                        player.muted = true;
                    }
            });
            */
        // for sources(audio/video) switch


        // end of sources(audio/video) switch



                /*
        videoDownload.addEventListener("click", () => {
            //const blob = new Blob(recordedBlobs, { type: 'video/mp4' });
            const blob = new Blob(recordedBlobs, { type: 'video/mp4' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            const guidID = crypto.randomUUID();
            a.style.display = 'none';
            a.href = url;
            a.download = '' + guidID + '.mp4';
            document.body.appendChild(a);
            a.click();
            setTimeout(() => {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 100);
        });
        */
    </script>
}